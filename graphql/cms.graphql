scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")

extend type Query {
  me: User @auth

  page(id: ID! @eq): Page
    @can(ability: "view")
    @softDeletes
    @find

  pages: [Page!]
    @eq(key: "parent_id", value: null)
    @can(ability: "view")
    @softDeletes
    @all

  contents(page_id: ID! @eq): [Content!]!
    @can(ability: "view")
    @softDeletes
    @paginate

  files: [File!]
    @can(ability: "view")
    @softDeletes
    @all
}

extend type Mutation {
  cmsLogin(email: String!, password: String!): User!
  cmsLogout: User @guard


  addPage(input: PageInput!, parent: ID, ref: ID): Page
    @can(ability: "add")

  movePage(id: ID!, parent: ID, ref: ID): Page
    @can(ability: "move")

  savePage(id: ID!, input: PageInput!): Page
    @can(ability: "save")

  dropPage(id: ID!): Page
    @can(ability: "drop")


  addContent(page_id: ID!, data: JSON!): Content
    @can(ability: "add")
    @create

  dropContent(id: ID! @whereKey): Content
    @can(ability: "drop")
    @delete

  keepContent(id: ID!): Content
    @can(ability: "keep")
    @restore

  hideContent(id: ID!): ID
    @can(ability: "hide")

  showContent(id: ID!): ID
    @can(ability: "show")


  saveFile(id: ID!, input: FileInput!): File
    @can(ability: "save")
    @upsert

  dropFile(id: ID!): File
    @can(ability: "drop")
    @delete

  keepFile(id: ID!): Content
    @can(ability: "keep")
    @restore
}

type Page {
  id: ID!
  lang: String
  title: String!
  slug: String!
  to: String
  tag: String
  data: JSON!
  status: Int!
  cache: Int!
  parent: Page
  children: [Page]!
  ancestors: [Page]!
  descendants: [Page]!
  created_at: String!
  updated_at: String!
  deleted_at: String
  latest: Content @hasOne
}

input PageInput {
  lang: String
  title: String!
  slug: String!
  to: String
  tag: String
  data: JSON!
  status: Int!
  cache: Int!
}

type Content {
  id: ID!
  page_id: Int!
  status: Int!
  data: JSON!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

input ContentInput {
  page_id: Int!
  data: JSON!
}

type File {
  id: ID!
  mime: String!
  url: String!
  previews: JSON!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

input FileInput {
  mime: String!
  url: String!
  previews: JSON!
}
