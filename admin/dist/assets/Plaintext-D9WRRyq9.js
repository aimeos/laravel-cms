import{_ as i,b as d,Z as o,o as r}from"../index.js";const u={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},assets:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1}},emits:["update:modelValue","error"],methods:{update(a){this.$emit("update:modelValue",a),this.validate()},async validate(){await this.$nextTick();const a=await this.$refs.field.validate();return this.$emit("error",a.length>0),!a.length}},watch:{modelValue:{immediate:!0,handler(a){this.validate()}}}};function m(a,l,e,c,s,n){return r(),d(o,{ref:"field",rules:[t=>!e.config.min||+(t==null?void 0:t.length)>=+e.config.min||a.$gettext("Minimum length is %{num} characters",{num:e.config.min}),t=>!e.config.max||+(t==null?void 0:t.length)<=+e.config.max||a.$gettext("Maximum length is %{num} characters",{num:e.config.max})],readonly:e.readonly,counter:e.config.max,placeholder:e.config.placeholder||"",modelValue:e.modelValue,"onUpdate:modelValue":l[0]||(l[0]=t=>n.update(t)),density:"comfortable","hide-details":"auto",variant:"outlined",clearable:""},null,8,["rules","readonly","counter","placeholder","modelValue"])}const h=i(u,[["render",m]]);export{h as default};
