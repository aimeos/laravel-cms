"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"JSON data type for JSON strings with arbitrary data"
scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")

extend type User {
    "CMS editor capability"
    cmseditor: Int!
}

extend type Query {
  "Current authenticated user"
  me: User @auth

  "Get page by ID"
  page(id: ID! @eq): Page
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\Page")
    @softDeletes
    @find

  "Get pages by parent ID and language (both optional)"
  pages(parent_id: ID, lang: String): [Page!]
    @paginate(builder: "\\Aimeos\\Cms\\GraphQL\\Query@pages", defaultCount: 100)
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\Page")
    @softDeletes

  "Get content item by ID"
  content(id: ID! @eq): Content
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\Content")
    @softDeletes
    @find

  "Get available content items (optionally limited by a list of IDs)"
  contents(id: [ID!]): [Content!]
    @paginate(builder: "\\Aimeos\\Cms\\GraphQL\\Query@contents", defaultCount: 100)
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\Content")
    @softDeletes

  "Get file item by ID"
  file(id: ID! @eq): File
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\File")
    @softDeletes
    @find

  "Get available files"
  files: [File!] @orderBy(column: "id", direction: DESC)
    @canModel(ability: "view", model: "\\Aimeos\\Cms\\Models\\File")
    @softDeletes
    @paginate
}

extend type Mutation {
  "Authenticated user"
  cmsLogin(email: String!, password: String!): User!

  "Log out authenticated user"
  cmsLogout: User @guard


  "Add a new page below the page referenced by 'parent' and before the page referenced by 'ref' (or append if NULL)"
  addPage(input: PageInput!, parent: ID, ref: ID): Page
    @canModel(ability: "add", model: "\\Aimeos\\Cms\\Models\\Page")

  "Move the page below the page referenced by 'parent' and before the page referenced by 'ref' (or append if NULL)"
  movePage(id: ID!, parent: ID, ref: ID): Page
    @canModel(ability: "move", model: "\\Aimeos\\Cms\\Models\\Page")

  "Update the values of an existing page"
  savePage(id: ID!, input: PageInput!): Page
    @canModel(ability: "save", model: "\\Aimeos\\Cms\\Models\\Page")

  "Delete an existing page"
  dropPage(id: ID!): Page
    @canModel(ability: "drop", model: "\\Aimeos\\Cms\\Models\\Page")

  "Restore an existing page"
  keepPage(id: ID!): Page
    @canModel(ability: "keep", model: "\\Aimeos\\Cms\\Models\\Page")

  "Purge an existing page"
  purgePage(id: ID!): Page
    @canModel(ability: "purge", model: "\\Aimeos\\Cms\\Models\\Page")

  "Publish page data"
  pubPage(id: ID!): Page
    @canModel(ability: "publish", model: "\\Aimeos\\Cms\\Models\\Page")


  "Add a new shared content element with file references"
  addContent(input: ContentInput!): Content
    @canModel(ability: "add", model: "\\Aimeos\\Cms\\Models\\Content")

  "Update an existing shared content element"
  saveContent(id: ID!, input: ContentInput!): Content
    @canModel(ability: "save", model: "\\Aimeos\\Cms\\Models\\Content")

  "Delete an existing shared content element"
  dropContent(id: ID!): Content
    @canModel(ability: "drop", model: "\\Aimeos\\Cms\\Models\\Content")

  "Restore an existing shared content element"
  keepContent(id: ID!): Content
    @canModel(ability: "keep", model: "\\Aimeos\\Cms\\Models\\Content")

  "Purge an existing shared content element"
  purgeContent(id: ID!): Content
    @canModel(ability: "purge", model: "\\Aimeos\\Cms\\Models\\Content")

  "Publish an existing shared content element"
  pubContent(id: ID!): Content
    @canModel(ability: "publish", model: "\\Aimeos\\Cms\\Models\\Content")


  "Adds a new file upload, optionally with previews and the describing name of the file"
  addFile(file: Upload!, previews: [Upload!], input: FileInput): File
    @canModel(ability: "add", model: "\\Aimeos\\Cms\\Models\\File")

  "Update an existing file"
  saveFile(id: ID!, input: FileInput!): File
    @canModel(ability: "save", model: "\\Aimeos\\Cms\\Models\\File")

  "Delete an existing file"
  dropFile(id: ID!): File
    @canModel(ability: "drop", model: "\\Aimeos\\Cms\\Models\\File")

  "Restore an existing file"
  keepFile(id: ID!): Content
    @canModel(ability: "keep", model: "\\Aimeos\\Cms\\Models\\File")

  "Purge an existing file"
  purgeFile(id: ID!): File
    @canModel(ability: "purge", model: "\\Aimeos\\Cms\\Models\\File")
}

type Page {
  "Unique page ID"
  id: ID!

  "ID of the parent page or NULL if it's a root page"
  parent_id: String

  "ISO language code, e.g. 'en', 'en_GB' or empty for default language"
  lang: String

  "URL segment of the page, unique in combination with the language"
  slug: String

  "Domain name the root page (!) is responsible for"
  domain: String

  "Short page name for menus"
  name: String

  "Descriptive page title"
  title: String

  "If not empty, the path or URL the browser is redirected to"
  to: String

  "Tag name to identify a page, e.g. for the starting point of a navigation structure"
  tag: String

  "Arbitrary page header elements"
  meta: JSON!

  "Arbitrary page content elements"
  data: JSON!

  "Arbitrary configuration settings"
  config: JSON!

  "Visibility status of the page, 0=inactive, 1=visible, 2=hidden in navigation"
  status: Int!

  "Cache lifetime in minutes"
  cache: Int!

  "Name of the last user who added, updated or deleted the page"
  editor: String!

  "Date/time value when the page was created"
  created_at: String!

  "Date/time value when the page was last modified"
  updated_at: String!

  "Date/time value when the page was deleted or NULL if it's available"
  deleted_at: String

  "If node has children"
  has: Boolean!

  "Relation to the parent page or NULL if it's a root page"
  parent: Page

  "Relation to the children of the current page"
  children: [Page!]! @paginate

  "Relation to the ancestors of the current page up to the root page"
  ancestors: [Page!]!

  "List of shared content elements assigned to the page"
  contents: [Content!]! @belongsToMany

  "List of versions for the page meta data"
  versions: [Version!]! @morphMany

  "Latest version of the page meta data"
  latest: Version @hasOne

  "Published version of the page meta data"
  published: Version @hasOne
}

input PageInput {
  "ISO language code, e.g. 'en', 'en_GB' or empty for default language"
  lang: String

  "URL segment of the page, unique in combination with the language"
  slug: String

  "Domain name the page is assigned to"
  domain: String

  "Short page name for menus"
  name: String

  "Descriptive page title"
  title: String

  "If not empty, the path or URL the browser is redirected to"
  to: String

  "Tag name to identify a page, e.g. for the starting point of a navigation structure"
  tag: String

  "Arbitrary page header elements"
  meta: JSON

  "Arbitrary page content elements"
  data: JSON

  "Arbitrary configuration settings"
  config: JSON

  "Visibility status of the page, 0=inactive, 1=visible, 2=hidden in navigation"
  status: Int

  "Cache lifetime in minutes"
  cache: Int

  "List of shared content IDs referenced by the page"
  contents: [ID!]

  "List of file IDs used in the meta data"
  files: [ID!]
}

type Content {
  "Unique content element ID"
  id: ID!

  "Type of the content element"
  type: String!

  "ISO language code, e.g. 'en', 'en_GB' or empty for default language"
  lang: String

  "Arbitrary string which describes the content"
  label: String

  "Arbitrary content element"
  data: JSON!

  "Name of the last user who added, updated or deleted the content element"
  editor: String!

  "Date/time value when the content element was created"
  created_at: String!

  "Date/time value when the content element was last modified"
  updated_at: String!

  "Date/time value when the content element was deleted or NULL if it's available"
  deleted_at: String

  "Relation of all pages the content element belongs to"
  pages: [Page!]! @belongsToMany

  "List of versioned data for the content element"
  versions: [Version!]! @morphMany

  "Latest version of the content data"
  latest: Version @hasOne

  "Published version of the content data"
  published: Version @hasOne
}

input ContentInput {
  "Type of the content element"
  type: String!

  "ISO language code, e.g. 'en', 'en_GB' or empty for default language"
  lang: String

  "Arbitrary string which describes the content"
  label: String

  "Arbitrary content element"
  data: JSON!

  "List of file IDs used in the meta or data properties"
  files: [ID!]
}

type Version {
  "Unique version ID"
  id: ID!

  "Arbitrary versioned content elements"
  data: JSON!

  "Arbitrary versioned content references"
  refs: JSON!

  "List of files used in the meta or data properties"
  files: [File!]

  "If versioned content is currently published or not"
  published: Boolean!

  "Name of the last user who added, updated or deleted the versioned data"
  editor: String!

  "Date/time value when the versioned data was created"
  created_at: String!
}

type File {
  "Unique ID of the stored file"
  id: ID!

  "Mime type of the stored file"
  mime: String

  "Tag to categorize the file"
  tag: String

  "Descriptive name of the stored file"
  name: String

  "Relative path to the stored file"
  path: String!

  "Preview images of the stored file if any"
  previews: JSON!

  "Name of the last user who added, updated or deleted the file"
  editor: String!

  "Date/time value when the file was created"
  created_at: String!

  "Date/time value when the file was last modified"
  updated_at: String!

  "Date/time value when the file was deleted or NULL if it's available"
  deleted_at: String

  "List of versions using the file"
  versions: [Version!]! @belongsToMany
}

input FileInput {
  "Tag to categorize the file"
  tag: String

  "Descriptive name of the stored file"
  name: String
}
