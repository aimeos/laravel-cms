import{_ as d,b as u,Z as s,o as c}from"../index.js";const m={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1}},emits:["update:modelValue","error"],methods:{check(e){let a=0,l=0;return e.split(`
`).forEach(n=>{l+=n.split(";").length,a++}),a?Number.isInteger(l/a):!0},update(e){this.$emit("update:modelValue",e.replace(/(\r)+/g,"").replace(/^\n+/,"").replace(/\n{2,}$/g,`
`)),this.validate()},async validate(){await this.$nextTick();const e=await this.$refs.field.validate();return this.$emit("error",e.length>0),!e.length}},watch:{modelValue:{immediate:!0,handler(e){this.validate()}}}};function f(e,a,l,n,h,r){return c(),u(s,{ref:"field",rules:[t=>!l.config.required||!!t||e.$gettext("Field is required"),t=>{var i,o;return!l.config.min||+((o=(i=t==null?void 0:t.split(`
`)[0])==null?void 0:i.split(";"))==null?void 0:o.length)>=+l.config.min||e.$gettext("Minimum are %{num} columns",{num:l.config.min})},t=>r.check(t)||e.$gettext("The number of columns is not the same in all rows")],"auto-grow":!0,readonly:l.readonly,placeholder:l.config.placeholder||`val;val;val
val;val;val`,modelValue:l.modelValue,"onUpdate:modelValue":a[0]||(a[0]=t=>r.update(t)),variant:"outlined","hide-details":"auto",density:"comfortable",clearable:""},null,8,["rules","readonly","placeholder","modelValue"])}const p=d(m,[["render",f]]);export{p as default};
