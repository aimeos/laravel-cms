import{_ as d,b as o,E as i,o as n}from"../index.js";const s={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1}},emits:["update:modelValue","error"],methods:{check(e){const a=this.config.allowed||["http","https"];return a.every(t=>/^[a-z]+/.test(t))?e?new RegExp(`^((${a.join("|")}://)?([^/s@:]+(:[^/s@:]+)?@)?([0-9a-z]+[.-])*[0-9a-z]+.[a-z]{2,}(:[0-9]{1,5})?)?(/.*)?$`).test(e):!0:this.$gettext("Invalid URL schema configuration")},update(e){this.$emit("update:modelValue",e),this.validate()},async validate(){await this.$nextTick();const e=await this.$refs.field.validate();return this.$emit("error",e.length>0),!e.length}},watch:{modelValue:{immediate:!0,handler(e){this.validate()}}}};function u(e,a,t,c,f,r){return n(),o(i,{ref:"field",placeholder:t.config.placeholder||"",rules:[l=>!t.config.required||!!l||e.$gettext("Value is required"),l=>r.check(l)||e.$gettext("Not a valid URL")],readonly:t.readonly,modelValue:t.modelValue,"onUpdate:modelValue":a[0]||(a[0]=l=>r.update(l)),density:"comfortable","hide-details":"auto",variant:"outlined",clearable:""},null,8,["placeholder","rules","readonly","modelValue"])}const m=d(s,[["render",u]]);export{m as default};
