import{_ as d,b as u,X as s,o as c}from"../index.js";const m={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1}},emits:["update:modelValue","error"],methods:{check(a){let t=0,e=0;return a.split(`
`).forEach(r=>{e+=r.split(";").length,t++}),t?Number.isInteger(e/t):!0},update(a){this.$emit("update:modelValue",a.replace(/(\r)+/g,"").replace(/^\n+/,"").replace(/\n{2,}$/g,`
`)),this.validate()},async validate(){await this.$nextTick();const a=await this.$refs.field.validate();return this.$emit("error",a.length>0),!a.length}},watch:{modelValue:{immediate:!0,handler(a){this.validate()}}}};function f(a,t,e,r,h,n){return c(),u(s,{ref:"field",rules:[l=>!e.config.required||!!l||"This field is required",l=>{var i,o;return!e.config.min||+((o=(i=l==null?void 0:l.split(`
`)[0])==null?void 0:i.split(";"))==null?void 0:o.length)>=+e.config.min||`Minimum are ${e.config.min} columns`},l=>n.check(l)||"The number of columns is not the same in all rows"],"auto-grow":!0,readonly:e.readonly,placeholder:e.config.placeholder||`val;val;val
val;val;val`,modelValue:e.modelValue,"onUpdate:modelValue":t[0]||(t[0]=l=>n.update(l)),variant:"outlined","hide-details":"auto",density:"comfortable",clearable:""},null,8,["rules","readonly","placeholder","modelValue"])}const p=d(m,[["render",f]]);export{p as default};
